/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mapdb.example.vrc;

import org.mapdb.DB;
import org.mapdb.DBMaker;

import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Duration;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

public class App {
    public void runMapDB() {
        DB mapDB = DBMaker.tempFileDB().make();
        DB mapDB2 = DBMaker.tempFileDB().make();
        List<Object> list = mapDB.indexTreeList("test").create();
        List<SamplePojo> list2 = mapDB2.indexTreeList("test2"
                , new DBMakerSerializer<SamplePojo>()).create();

        int maxObjects = 100000;
        createObjects(list, list2, maxObjects);
        printMapDBFileInfo(mapDB);
        printMapDBFileInfo(mapDB2);
        int[] diffIndex = compareLists(list, list2, maxObjects);
        System.out.printf("Failed matches: %s , IDs: %s %n",diffIndex.length, Arrays.toString(diffIndex));
        mapDB.close();
    }

    int[] compareLists(List<Object> list, List<SamplePojo> list2, int maxObjects) {
        Instant start;
        Instant end;
        start = Instant.now();
        int[] failedMatches = IntStream.range(0, maxObjects)
                .mapToObj(o -> new Object[]{o, list.get(o).equals(list2.get(o))})
                .filter(objects -> !((Boolean) objects[1]))
                .mapToInt(value -> (Integer) value[0])
                .toArray();
        end = Instant.now();
        System.out.printf("Duration to compare SamplePojo is %s %n",Duration.between(start,end));
        return failedMatches;
    }

    void createObjects(List<Object> list, List<SamplePojo> list2, int maxObjects) {
        Instant start = Instant.now();
        IntStream.range(0, maxObjects).mapToObj(value ->
                SamplePojo.builder().id(value).str1("Str1-" + value).str2("Str2-" + value)
                .float1((float) value)
                .double1(value)
                .bigDecimal(BigDecimal.valueOf(value)).build())
                .forEach(value -> {
            list.add(value);
            list2.add(value);
        });
        Instant end = Instant.now();
        System.out.printf("Duration to create and persist SamplePojo is %s %n",Duration.between(start,end));
    }

    private void printMapDBFileInfo(DB mapDB) {
        mapDB.getStore().getAllFiles().forEach(
                s -> {
                    try {
                        System.out.printf("File name: %s , File Size : %s kB %n",s,Files.size(Path.of(s))/1024);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });
    }

    public static void main(String[] args) {
        new App().runMapDB();
    }
}
